image: docker:20.10.17-git

stages:
  - build
  - deploy

docker-build:
  stage: build
  script:
  - docker login -u root -p $TOKEN_REGISTRY $CI_REGISTRY
  - docker build -t $CI_REGISTRY/$CONTAINER_REPOSITORY/$CI_PROJECT_NAME/frontend:$CI_COMMIT_SHA ./frontend
  - docker push $CI_REGISTRY/$CONTAINER_REPOSITORY/$CI_PROJECT_NAME/frontend:$CI_COMMIT_SHA
  - docker build -t  $CI_REGISTRY/$CONTAINER_REPOSITORY/$CI_PROJECT_NAME/api:$CI_COMMIT_SHA ./api
  - docker push $CI_REGISTRY/$CONTAINER_REPOSITORY/$CI_PROJECT_NAME/api:$CI_COMMIT_SHA
  - docker build -t $CI_REGISTRY/$CONTAINER_REPOSITORY/$CI_PROJECT_NAME/nginx:$CI_COMMIT_SHA ./nginx
  - docker push $CI_REGISTRY/$CONTAINER_REPOSITORY/$CI_PROJECT_NAME/nginx:$CI_COMMIT_SHA
  tags:
  - docker

deploy:
  stage: deploy
  variables:
    DOCKER_HOST: tcp://$HOST_MANAGER:$PORT_MANAGER
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "/certs"
  script:
    - mkdir -p $DOCKER_CERT_PATH
    - echo "$TLSCACERT" > $DOCKER_CERT_PATH/ca.pem
    - echo "$TLSCERT" > $DOCKER_CERT_PATH/cert.pem
    - echo "$TLSKEY" > $DOCKER_CERT_PATH/key.pem
    - docker login -u $DOCKER_REGISTORY_LOGIN -p $TOKEN_REGISTRY $CI_REGISTRY
    - docker stack deploy -c docker-compose.yml env_name --with-registry-auth
    - rm -rf $DOCKER_CERT_PATH
  environment:
    name: main
    url:  https://$HOST_MANAGER
  only:
    - main
  tags:
    - docker